<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xie Dongting&apos;s Blog</title>
    <description>Personal learning sharing.</description>
    <link>http://localhost:4000/xiedongting.github.io/</link>
    <atom:link href="http://localhost:4000/xiedongting.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 31 May 2025 11:17:40 +0800</pubDate>
    <lastBuildDate>Sat, 31 May 2025 11:17:40 +0800</lastBuildDate>
    <generator>Jekyll v4.4.1</generator>
    
      <item>
        <title>新手投稿必了解系列之OpenReview</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;今天终于提交了nips的正文，通过亲自投出去的这第一篇A会，我了解到了投稿的一系列流程，因此打算开个新坑，介绍我作为新手再投稿过程中了解到的一系列东西，如有不对也请大家批评指正。本篇先分享OpenReview。&lt;/p&gt;

&lt;h2 id=&quot;什么是-openreview&quot;&gt;什么是 OpenReview？&lt;/h2&gt;

&lt;p&gt;OpenReview 是一个开源平台，旨在为学术会议、期刊和研讨会提供透明且协作的同行评审服务。与传统的同行评审系统不同，OpenReview 强调开放性，通过公开评审、论文和讨论，促进学术界的责任感和建设性对话。该平台广泛应用于计算机科学、人工智能和机器学习等领域，主持了如 NeurIPS、ICML 和 ICLR 等顶级会议的评审流程。&lt;/p&gt;

&lt;p&gt;OpenReview 允许研究人员提交论文、评审者提供反馈、作者回应评论，所有这些都在一个结构化但灵活的环境中进行。此外，平台还支持公开评论、修订跟踪以及与其他学术工具的集成，使其成为全球研究人员的强大资源。&lt;/p&gt;

&lt;h2 id=&quot;为什么使用-openreview&quot;&gt;为什么使用 OpenReview？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;透明性：OpenReview 提倡评审和论文的公开访问，鼓励更广泛的社区参与。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;协作性：作者、评审者和读者可以在平台上进行讨论，促进更互动的评审过程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可访问性：平台免费使用，其开源特性支持持续改进和定制。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立声誉：对于新手研究人员来说，通过参与 OpenReview 的评审或评论，可以提升学术信誉。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openreview-新手注册流程详解&quot;&gt;OpenReview 新手注册流程详解&lt;/h2&gt;

&lt;p&gt;以下是在 OpenReview 平台上注册新账号的详细步骤，适合初次接触该平台的用户：&lt;/p&gt;

&lt;p&gt;步骤 1：访问 OpenReview 官网&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;打开浏览器，输入官方网址：https://openreview.net/。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确保网络连接稳定，建议使用常见的浏览器以获得最佳体验。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤 2：点击注册按钮&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在首页右上角，找到并点击 “Sign Up”（注册）按钮。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统将跳转到注册页面，提示输入相关信息。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤 3：填写注册信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;邮箱地址：输入一个常用的、有效的电子邮箱地址。OpenReview 会通过邮箱发送验证邮件，因此请确保邮箱可正常接收邮件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;密码：设置一个安全的密码，建议包含字母、数字和特殊字符，长度至少 8 位。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确认密码：再次输入密码以确认。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤 4：验证邮箱&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提交注册信息后，OpenReview 会向您提供的邮箱发送一封验证邮件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;登录您的邮箱，找到来自 OpenReview 的邮件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击邮件中的验证链接，完成邮箱验证。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤 5：完善个人资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;验证邮箱后，您将被引导至个人资料页面。需要填写以下信息：&lt;/p&gt;

    &lt;p&gt;全名：输入您的真实姓名（建议使用英文，方便国际学术交流）。&lt;/p&gt;

    &lt;p&gt;机构/组织：填写您所在的大学、研究机构或公司名称（如适用）。&lt;/p&gt;

    &lt;p&gt;ORCID ID：如果您有 ORCID（开放研究者与贡献者 ID），可以输入以关联您的学术身份。&lt;/p&gt;

    &lt;p&gt;研究领域：选择您感兴趣的领域（如机器学习、计算机视觉等），以便平台推荐相关会议或论文。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;填写完成后，点击 “Save”（保存）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤 6：设置 OpenReview 个人主页&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;注册完成后，系统会为您生成一个 OpenReview 个人主页,如 https://openreview.net/profile?id=~Your_Name1。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;您可以在个人主页中进一步完善信息，例如添加个人网站链接、Google Scholar 页面或其他学术简介。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确保您的主页信息准确，这将有助于其他研究人员了解您的背景。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;OpenReview 是一个功能强大且透明的学术评审平台，对于希望参与全球学术交流的研究人员来说是一个宝贵的工具。通过以上详细的注册流程，新手用户可以快速创建账号并开始探索平台的功能。无论是提交论文、参与评审，还是加入学术讨论，OpenReview 都为您提供了一个开放的舞台。立即注册，开启您的学术之旅吧！&lt;/p&gt;
</description>
        <pubDate>Fri, 16 May 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/xiedongting.github.io/2025/05/16/paper-openreview/</link>
        <guid isPermaLink="true">http://localhost:4000/xiedongting.github.io/2025/05/16/paper-openreview/</guid>
        
        <category>Nips</category>
        
        <category>paper writing</category>
        
        
      </item>
    
      <item>
        <title>三分钟带你了解RAG</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近接近完成了一篇nips的工作，做的是LLM + RAG进行自动算法生成。通过完成这篇工作，我对RAG有了一些浅薄的认识，写在此处分享给大家。&lt;/p&gt;

&lt;h2 id=&quot;引入-rag-的必要性&quot;&gt;引入 RAG 的必要性&lt;/h2&gt;

&lt;p&gt;传统大语言模型存在下列局限性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;知识局限与幻觉：模型依赖预训练数据，知识范围受限于训练时的语料，可能生成不准确或虚构内容（即“幻觉”），尤其在处理最新信息或专业领域问题时。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;时效性不足：预训练知识无法动态更新，导致对实时数据的响应能力较弱。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;专业场景需求：法律、医疗等领域的查询需要精准引用外部数据，而传统模型难以提供可靠依据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;计算成本：单纯扩大模型规模成本高昂，且效果提升有限。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RAG 通过结合外部知识库和检索机制，解决上述问题，为知识密集型任务提供准确、动态的解决方案。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rag-的基本原理&quot;&gt;RAG 的基本原理&lt;/h2&gt;

&lt;p&gt;RAG 是一种融合信息检索和自然语言生成的框架，通过引入外部知识增强生成内容的准确性和相关性。其运作依赖三个核心组件：检索器、生成器和知识库，并通过一个系统化的工作流程将它们整合。&lt;/p&gt;

&lt;h3 id=&quot;检索器&quot;&gt;检索器&lt;/h3&gt;

&lt;p&gt;检索器的主要任务是从外部知识库中查找与用户查询语义相关的文档或信息片段。它采用基于向量的语义搜索技术，将查询和文档转化为高维向量表示，通过预训练嵌入模型捉文本的语义含义。检索器通过计算查询向量与文档向量之间的相似度（例如余弦相似度或内积）来确定相关性。为了在大型知识库中高效检索，检索器使用索引技术快速定位最相似的文档。在某些场景下，检索器可能结合稀疏检索方法以提高召回率，确保尽可能找到所有相关文档，同时通过微调嵌入模型或优化检索策略提升精确率，确保检索到的文档高度相关。检索器的性能直接影响提供给生成器的上下文质量，因此在专业领域应用中常需对嵌入模型进行特定领域数据的微调。&lt;/p&gt;

&lt;h3 id=&quot;生成器&quot;&gt;生成器&lt;/h3&gt;

&lt;p&gt;生成器通常基于大型语言模型，负责根据检索到的文档和用户查询生成自然、流畅且准确的回答。它将查询与检索到的文档拼接为输入，将文档视为额外的上下文信息。生成器通过注意力机制重点关注检索文档中的相关内容，同时综合查询的意图，生成符合语义的回答。生成器的关键在于平衡对检索文档的依赖与语言生成的灵活性：过度依赖文档可能导致回答过于机械，缺乏自然性；而忽视文档则可能引发“幻觉”，生成不准确内容。为此，生成器通常通过提示工程或在特定任务数据上微调来优化，确保既能充分利用检索到的上下文，又能生成通顺的语言输出。&lt;/p&gt;

&lt;h3 id=&quot;知识库&quot;&gt;知识库&lt;/h3&gt;

&lt;p&gt;知识库是存储外部信息的数据库，供检索器查询使用。它可以包含非结构化数据或结构化数据。为适配检索需求，知识库需预先处理，例如将文档分割为较小的片段并转化为向量表示，以支持高效的语义搜索。知识库的一个显著优势是支持动态更新，可以随时添加新信息或删除过时内容，特别适合需要实时性的应用场景，如新闻摘要或技术支持。知识库的质量和覆盖范围对 RAG 的整体性能至关重要，因此需要定期进行数据清洗、去重和结构优化，以确保文档内容的全面性和相关性。&lt;/p&gt;

&lt;h2 id=&quot;工作流程&quot;&gt;工作流程&lt;/h2&gt;

&lt;p&gt;RAG 的工作流程从用户输入查询开始，例如“2025 年 AI 技术趋势”。检索器首先通过嵌入模型将查询编码为向量表示，捕捉其语义意图。然后，检索器在知识库中搜索与查询向量最相似的 top-k 个文档（k 为可调参数，如 5 或 10），基于向量相似度排序。检索到的文档与查询拼接，形成生成器的输入，通常格式为“[CLS] 查询 [SEP] 文档1 [SEP] 文档2 …”。生成器处理这一综合输入，分析检索文档的上下文并结合查询，生成自然语言回答，可能包括对文档内容的总结或直接引用。在某些实现中，系统会对生成结果进行后处理，例如检查事实一致性或添加文档引用，以提高回答的可靠性和透明度。这一流程确保 RAG 能够利用外部知识生成准确且上下文相关的回答。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;RAG 的引入解决了传统生成模型在知识范围、时效性和准确性上的局限，通过检索器、生成器和知识库的协同工作，提供了一种高效的解决方案。其基本原理依托详细的组件设计和系统化流程，核心思想则是通过外部知识增强生成能力，同时保持模块化、可更新和高可解释性。&lt;/p&gt;
</description>
        <pubDate>Sat, 03 May 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/xiedongting.github.io/2025/05/03/LLM-RAG/</link>
        <guid isPermaLink="true">http://localhost:4000/xiedongting.github.io/2025/05/03/LLM-RAG/</guid>
        
        <category>Nips</category>
        
        <category>LLM</category>
        
        <category>artificial intelligence</category>
        
        
      </item>
    
      <item>
        <title>二叉树</title>
        <description>&lt;p&gt;本文将探讨二叉树这一数据结构的基本原理，并进一步介绍其向多叉树的扩展。二叉树和多叉树在计算机科学中广泛应用于数据库、文件系统和决策树等领域。&lt;/p&gt;

&lt;h1 id=&quot;二叉树的基本原理&quot;&gt;二叉树的基本原理&lt;/h1&gt;

&lt;p&gt;二叉树是一种树形数据结构，每个节点最多有两个子节点，分别称为左子节点和右子节点。其核心特点包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;根节点：树的顶端节点，是整个树的起点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;子节点：每个节点可以有零个、一个或两个子节点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;叶节点：没有子节点的节点，位于树的最底层。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高度：从根节点到最远叶节点的路径长度。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二叉树有几种常见类型&quot;&gt;二叉树有几种常见类型：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;满二叉树：每个非叶节点都有两个子节点，且所有叶节点位于同一层。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;完全二叉树：除最后一层外，所有层都完全填满，最后一层的节点尽量靠左排列。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二叉搜索树：左子树的所有节点值小于父节点，右子树的所有节点值大于父节点。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二叉树的遍历方式包括&quot;&gt;二叉树的遍历方式包括：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;前序遍历：先访问根节点，再递归遍历左子树和右子树。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中序遍历：先递归遍历左子树，再访问根节点，最后遍历右子树。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;后序遍历：先递归遍历左子树和右子树，再访问根节点。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些遍历方式在搜索、表达式求值和树结构分析中各有用途。&lt;/p&gt;

&lt;h1 id=&quot;多叉树的扩展&quot;&gt;多叉树的扩展&lt;/h1&gt;

&lt;p&gt;随着应用场景的复杂化，二叉树的限制因为每个节点最多两个子节点的特点，导致不足以满足需求，因此多叉树应运而生。多叉树允许每个节点拥有任意数量的子节点，有以下常见类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;B 树：一种自平衡多叉树，广泛用于数据库和文件系统索引，保证高效的查找和插入操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trie：一种多叉树变种，用于存储字符串或键值对，常见于字典和自动补全功能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;遍历方式：多叉树的遍历通常采用广度优先搜索（BFS）或深度优先搜索（DFS），以适应多子节点的结构。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多叉树相比二叉树更适合处理多分支的数据场景。例如，在文件系统中，一个目录（节点）可能包含多个子目录或文件，而不像二叉树那样局限于两个分支。&lt;/p&gt;

&lt;h2 id=&quot;二叉树与多叉树的联系与区别&quot;&gt;二叉树与多叉树的联系与区别&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;联系：二叉树可以看作多叉树的一种特例，限制每个节点最多有两个子节点。任何多叉树都可以通过“左孩子-右兄弟”表示法转化为二叉树。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;区别：多叉树的节点结构更灵活，但实现和平衡（如 B 树的自平衡机制）通常比二叉树更复杂。二叉树在某些场景（如二叉搜索树）下具有更简单的操作逻辑。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;二叉树作为基础数据结构，通过其简单的二分支结构为许多算法提供了高效的实现方式。而多叉树通过扩展子节点数量，适应了更广泛的应用场景，如数据库索引和文件系统。理解这两者的原理和联系，有助于设计和优化复杂的数据结构。&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Apr 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/xiedongting.github.io/2025/04/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
        <guid isPermaLink="true">http://localhost:4000/xiedongting.github.io/2025/04/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
        
        <category>专业课</category>
        
        <category>数据结构</category>
        
        
      </item>
    
  </channel>
</rss>
